

name: Build and Deploy
on: [pull_request]

jobs:
  set-changed-files:
    name: Set Changed Files Env Vars
    runs-on: ubuntu-latest
    steps:
    - id: files
      uses: jitterbit/get-changed-files@v1
    - name: set_training
      if: |
          contains(  steps.files.outputs.all, 'data/' ) 
          || contains(  steps.files.outputs.all, 'config.yml' ) 
          || contains(  steps.files.outputs.all, 'domain.yml' )
      run: echo "::set-env name=TRAINING::true"
    - name: set_nlu
      if: |
        contains(  steps.files.outputs.all, 'data/nlu/' ) 
        || contains(  steps.files.outputs.all, 'config.yml' )
      run: echo "::set-env name=NLU::true"
    - name: set_stories
      if: |
        ( contains(  steps.files.outputs.all, 'data/core/' ) 
        || contains(  steps.files.outputs.all, 'config.yml' ) 
        || contains(  steps.files.outputs.all, 'domain.yml' ) )
      run: echo "::set-env name=STORIES::true"
    - name: set_actions
      if: |
        contains(  steps.files.outputs.all, 'actions/' ) 
        || contains(  steps.files.outputs.all, 'Dockerfile' )
      run: echo "::set-env name=ACTIONS::true"
  lint-testing:
    name: Code Formatting Tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Set up Python 3.7
      uses: actions/setup-python@v1
      with:
        python-version: 3.7
    - name: Install dependencies
      run: |
        python -m pip install --upgrade "pip<20"
        pip install -r requirements-dev.txt
    - name: Code Formatting Tests
      working-directory: ${{ github.workspace }}
      run: |
        make lint
  type-testing:
    name: Type Tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Set up Python 3.7
      uses: actions/setup-python@v1
      with:
        python-version: 3.7
    - name: Install dependencies
      run: |
        python -m pip install --upgrade "pip<20"
        pip install -r requirements-dev.txt
    - name: Type Checking
      working-directory: ${{ github.workspace }}
      run: |
        make types
  data-validation:
    name: Data Validation
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Set up Python 3.7
      uses: actions/setup-python@v1
      with:
        python-version: 3.7
    - name: Install dependencies
      run: |
        python -m pip install --upgrade "pip<20"
        pip install -r requirements-dev.txt
    - name: Rasa Data Validation
      working-directory: ${{ github.workspace }}
      run: |
        rasa data validate --debug
  training-testing:
    name: Testing Stories
    runs-on: ubuntu-latest
    needs: [data-validation]
    if: env.TRAINING == "true"
    steps:
    - uses: actions/checkout@v1
    - name: Set up Python 3.7
      uses: actions/setup-python@v1
      with:
        python-version: 3.7
    - name: Install dependencies
      run: |
          python -m pip install --upgrade "pip<20"
          pip install -r requirements-dev.txt
    - name: Cross-validate NLU model
      if: env.NLU == "true"
      run: |  
          rasa test nlu -f 3 --cross-validation
          python .github/workflows/format_results.py
    - name: post cross-val results to PR
      if: steps.cvnlu.outcome == 'success'
      uses: amn41/comment-on-pr@comment-file-contents
      continue-on-error: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        msg: results.md
    - name: Train Model
      working-directory: ${{ github.workspace }}
      run: |
        rasa train
    - name: Test Training Stories
      if: env.STORIES == "true"
      working-directory: ${{ github.workspace }}
      run: |
        rasa test core --stories test/test_stories.md --fail-on-prediction-errors
    - name: Upload model
      if: |
          github.ref == 'refs/heads/master'
      uses: actions/upload-artifact@master
      with:
        name: model
        path: models
  build-images:
    name: Build and Push Images
    needs: [lint-testing, type-testing, training-testing]
    runs-on: ubuntu-latest
    if: env.ACTIONS == "true"
    steps:
    - uses: actions/checkout@v1
    - name: Authenticate into Google Cloud Platform
      uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        version: '275.0.0'
        service_account_key: ${{ secrets.GCLOUD_AUTH }}
    - name: Configure Docker to use Google Cloud Platform
      run: |
        gcloud auth configure-docker
    - name: Pull Latest Image
      run: |
        docker pull gcr.io/replicated-test/rasa-demo:latest || true
    - name: Set Build ID from PR Ref
      run: echo ::set-env name=BUILD_NUMBER::$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
    - name: Build Image
      run: |
        docker build -t gcr.io/replicated-test/rasa-demo:pr$BUILD_NUMBER -t gcr.io/replicated-test/rasa-demo:latest --cache-from gcr.io/replicated-test/rasa-demo:latest .
    # - name: Push PR Image to Google Cloud Container Registry
    #   run: |
    #     docker push gcr.io/replicated-test/rasa-demo:pr$BUILD_NUMBER

  # nlu-hyperopt:
  #   name: NLU hyperoptimization
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Set up Python 3.7
  #       uses: actions/setup-python@v1
  #       with:
  #         python-version: 3.7
  #     - name: Install dependencies
  #       run: |
  #         python -m pip install --upgrade "pip<20"
  #         pip install -r requirements-dev.txt
  #     - name: Shuffle and split data
  #       run: |
  #         rasa data split nlu
  #         mv train_test_split/test_data.md hyperopt_data/validation.md
  #         mv train_test_split/training_data.md hyperopt_data/train.md
  #         ls ${{ github.workspace }}/hyperopt_data/*
  #     - name: NLU hyperoptimization
  #       id: nluhyperopt
  #       uses: RasaHQ/nlu-hyperopt@rasa-1-compat
  #       with:
  #         data_directory: ${{ github.workspace }}/hyperopt_data
  #         search_space: ${{ github.workspace }}/hyperopt_data/space.py
  #         max_evals: 1
  #         target_metric: f1_score
    # - id: files
    #   uses: jitterbit/get-changed-files@v1
    # - run: |
    #     for changed_file in ${{ steps.files.outputs.all }}; do
    #       echo "Do something with this ${changed_file}."
    #     done
    # - name: Cross-validate NLU model
    #   id: cvnlu
    #   run: |
    #     echo "Would cross validate"
    #   if: contains( steps.files.outputs.all, 'data/nlu' )
    # - name: post cross-val results to PR
    #   if: steps.cvnlu.outcome == 'success'
    #   run: |
    #     echo "Would post CV result"
    # - name: Train Model
    #   id: train
    #   if: |
    #       contains(  ${{ steps.files.outputs.all }}, data/ ) 
    #       || contains(  ${{ steps.files.outputs.all }}, config.yml ) 
    #       || contains(  ${{ steps.files.outputs.all }}, domain.yml )
    #   run: |
    #     echo "Would have trained a model"
    # - name: Test Training Stories
    #   run: |
    #     echo "Would have tested stories"
    #   if: |
    #       contains(  ${{ steps.files.outputs.all }}, data/core/ ) 
    #       || contains(  ${{ steps.files.outputs.all }}, config.yml ) 
    #       || contains(  ${{ steps.files.outputs.all }}, domain.yml )
    # - name: Upload model
    #   if: |
    #       github.ref == 'refs/heads/master' 
    #       && steps.train.outcome == 'success'
    #   run: |
    #       echo "Would have uploaded a model"